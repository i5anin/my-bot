import * as fs from "fs";
import * as path from "path";
import { fileURLToPath } from "url";

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É –∏ –µ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);


// –ü–∞–ø–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Ñ–∞–π–ª—ã
const directories = [__dirname, path.join(__dirname, "..")];

// –ö–∞—Ä—Ç–∞ –∏–∫–æ–Ω–æ–∫ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
const fileIcons = {
    ".js": "üìú", ".ts": "üìú", ".json": "üìÑ", ".html": "üåê",
    ".css": "üé®", ".md": "üìñ", ".txt": "üìù", ".jpg": "üñºÔ∏è",
    ".png": "üñºÔ∏è", ".gif": "üéûÔ∏è", ".mp4": "üé¨", ".mp3": "üéµ",
    ".zip": "üì¶", ".exe": "‚öôÔ∏è", ".bat": "‚ö°", ".sh": "üêß",
    ".sql": "üóÑÔ∏è", ".env": "üîê", ".log": "üìë"
};

// –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ `../`
const additionalFiles = ["tsconfig.json", "package.json"];

directories.forEach((dir) => {
    fs.readdir(dir, (err, files) => {
        if (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:", err);
            return;
        }

        console.log(`üìÇ –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${dir}`);

        files.forEach(file => {
            const filePath = path.join(dir, file);
            const ext = path.extname(file);
            const icon = fileIcons[ext] || "üìÅ"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–∞–ø–∫–∞

            if (fs.statSync(filePath).isFile() || additionalFiles.includes(file)) {
                console.log(`${icon} ${file}`);

                // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤)
                try {
                    const content = fs.readFileSync(filePath, "utf8");
                    console.log("üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:");
                    console.log(content.substring(0, 5000));
                    console.log("‚Äî".repeat(50));
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file}:`, error.message);
                }
            }
        });
    });
});
